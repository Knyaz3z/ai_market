import type { FC } from 'react';
import './Contacts.scss';

export type ContactItem = {
    id: number;
    title: string;
    inner: string;
    icon?: string;
};

export type ContactsProps = {
    contacts: ContactItem[];
    title?: string;
    subtitle?: string;
};

export const Contacts: FC<ContactsProps> = ({
                                                contacts,
                                                title = "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏",
                                                subtitle = "–ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ"
                                            }) => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    const handleContactClick = (contact: ContactItem) => {
        if (contact.title.toLowerCase().includes('—Ç–µ–ª–µ—Ñ–æ–Ω')) {
            window.location.href = `tel:${contact.inner}`;
        } else if (contact.title.toLowerCase().includes('email') || contact.title.toLowerCase().includes('–ø–æ—á—Ç–∞')) {
            window.location.href = `mailto:${contact.inner}`;
        } else if (contact.title.toLowerCase().includes('whatsapp')) {
            window.open(`https://wa.me/${contact.inner.replace(/\D/g, '')}`, '_blank');
        } else if (contact.title.toLowerCase().includes('telegram')) {
            window.open(`https://t.me/${contact.inner.replace('@', '')}`, '_blank');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    const getDefaultIcon = (title: string): string => {
        const lowerTitle = title.toLowerCase();
        if (lowerTitle.includes('—Ç–µ–ª–µ—Ñ–æ–Ω')) return 'üìû';
        if (lowerTitle.includes('email') || lowerTitle.includes('–ø–æ—á—Ç–∞')) return '‚úâÔ∏è';
        if (lowerTitle.includes('whatsapp')) return 'üí¨';
        if (lowerTitle.includes('telegram')) return 'üì±';
        return 'üìå';
    };

    return (
        <section className="contacts-block">
            <div className="contacts-container">
                <header className={'contacts__header header'}>
                    <h2 className="contacts-title title">{title}</h2>
                    <p className="contacts-subtitle subtitle">{subtitle}</p>
                </header>

                <div className="contacts-grid">
                    {contacts.map(contact => {
                        const isClickable = contact.title.toLowerCase().includes('—Ç–µ–ª–µ—Ñ–æ–Ω') ||
                            contact.title.toLowerCase().includes('email') ||
                            contact.title.toLowerCase().includes('–ø–æ—á—Ç–∞') ||
                            contact.title.toLowerCase().includes('whatsapp') ||
                            contact.title.toLowerCase().includes('telegram');

                        return (
                            <div
                                key={contact.id}
                                className={`contact-card ${isClickable ? 'clickable' : ''}`}
                                onClick={() => isClickable && handleContactClick(contact)}
                            >
                                <div className="contact-icon">
                                    {contact.icon || getDefaultIcon(contact.title)}
                                </div>
                                <h3 className="contact-title">{contact.title}</h3>
                                <p className="contact-info">{contact.inner}</p>
                            </div>
                        );
                    })}
                </div>
            </div>
        </section>
    );
};